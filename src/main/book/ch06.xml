<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml" xml:id="chapter.testng">
         
	<title><application>TestNG</application> and <acronym>TAP</acronym></title>
	
	<para><application>TestNG</application> is a Test Framework created by CÃ©dric Beust to fill the  
	gaps left by JUnit at that time. One of these gaps was extensibility. It  
	was hard modify the behavior of <application>JUnit</application> framework, thus you had to live with 
	what the framework provided or, literaly, hack it. One of the ways to 
	extend <application>TestNG</application> is using listeners</para>
	
	<para>Using listeners in <application>TestNG</application> you can add actions during your test 
	execution lifecycle. In tap4j there is a Listener responsible for creating 
	<acronym>TAP</acronym> Streams from your <application>TestNG</application> test suite. The <application>TestNG</application> tap4j listener 
	generates <acronym>TAP</acronym> Streams for suites, groups, tests and methods. It was 
	created based on the HTML listener. The classes used to integrate 
	<application>TestNG</application> and <acronym>TAP</acronym> are in the package org.tap4j.ext.testng in  
	org.tap4j:tap4j:2.0:jar.</para>
	
	<para>To make your existing <application>TestNG</application> tests output <acronym>TAP</acronym> all you need to do is 
	add tap4j listener to your project. You can do so by adding a listener to 
	your classes or to your test suite. Although in this book we show both 
	ways, we recommend you to use the latter.</para>

	<example>
	<title>sample.MyFirstTest.java</title>
<programlisting 
	linenumbering="numbered" 
	language="Java"><![CDATA[package sample;

import org.tap4j.ext.testng.TestTAPReporter;
import org.testng.Assert;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

@Listeners(TestTAPReporter.class)
public class MyFirstTest
{

	@Test
	public void testCurrentTime()
	{
		Assert.assertTrue( System.currentTimeMillis() > 0 );
	}
	
}]]>
</programlisting>
	</example>

	<para>The code above contains a sample test that asserts that the current 
	time in millis returned by the System is greater than zero. Notice though 
	that we added the annotation @Listeners with tap4j's Listener as its value. 
	The TestTAPReporter listener is responsible for generating <acronym>TAP</acronym> Streams for 
	tests and methods. After running your test with this listener the 
	following files will have been generated for you: sample.MyFirstTest.tap, 
	sample.MyFirstTest#testCurrentTime.tap. If you are using Maven these files 
	may have been created in ${basedir}/test-output or ${basedir}/target/surefire-reports 
	or in another directoy depending on your configuration.</para>
	
	<example>
	<title>sample.MyFirstTest.tap</title>
<programlisting><![CDATA[]]>1..1
ok 1 - sample.MyFirstTest#testCurrentTime
  ---
  message: TestNG Test testCurrentTime
  severity: '~'
  source: sample.MyFirstTest#testCurrentTime
  datetime: '2011-05-16T12:47:10'
  file: sample.MyFirstTest
  line: '~'
  name: testCurrentTime
  extensions: '~'
  got: '~'
  expected: '~'
  display: '~'
  dump: '~'
  error: '~'
  backtrace: '~'
  ...
</programlisting>
	</example>

	<example>
	<title>sample.MyFirstTest#testCurrentTime.tap</title>
<programlisting><![CDATA[1..1
ok 1 - sample.MyFirstTest#testCurrentTime
  ---
  message: TestNG Test testCurrentTime
  severity: '~'
  source: sample.MyFirstTest#testCurrentTime
  datetime: '2011-05-16T12:47:10'
  file: sample.MyFirstTest
  line: '~'
  name: testCurrentTime
  extensions: '~'
  got: '~'
  expected: '~'
  display: '~'
  dump: '~'
  error: '~'
  backtrace: '~'
  ...
]]></programlisting>
	</example>

	<para>Next we will see how to add our listeners to a <application>TestNG</application> 
	suite (XML or YAML).</para>
	
	<example>
	<title>sample.suite.xml</title>
<programlisting><![CDATA[<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >
  
<suite name="Sample suite" verbose="1" >
  <listeners>
  	<listener class-name="org.tap4j.ext.testng.TestTAPReporter"></listener>
  	<listener class-name="org.tap4j.ext.testng.SuiteTAPReporter"></listener>
  </listeners>
  <test name="My first test">
    <classes>
      <class name="sample.MyFirstTest"/>
    </classes>
  </test>
</suite>]]></programlisting>
	</example>
	
	<example>
	<title>sample.suite.yaml</title>
<programlisting><![CDATA[name: Sample suite
verbose: 1

listeners: 
  - org.tap4j.ext.testng.SuiteTAPReporter
  - org.tap4j.ext.testng.TestTAPReporter

tests:
  - name: My first test
    classes:
      - sample.MyFirstTest]]></programlisting>
	</example>
      
	<para>After executing your tests using the listeners shown above you 
	should find the following new file in your output folder: Sample suite.tap. 
	A new listener was added here, it is org.tap4j.ext.testng.SuiteTAPReporter. 
	This listener is responsible for creating <acronym>TAP</acronym> Streams per suite and groups 
	for you.</para>
	
	<example>
	<title>Sample suite.tap</title>
<programlisting><![CDATA[1..1
ok 1 - sample.MyFirstTest#testCurrentTime
  ---
  message: TestNG Test testCurrentTime
  severity: '~'
  source: sample.MyFirstTest#testCurrentTime
  datetime: '2011-05-16T12:44:08'
  file: sample.MyFirstTest
  line: '~'
  name: testCurrentTime
  extensions: '~'
  got: '~'
  expected: '~'
  display: '~'
  dump: '~'
  error: '~'
  backtrace: '~'
  ...
]]></programlisting>
	</example>

</chapter>